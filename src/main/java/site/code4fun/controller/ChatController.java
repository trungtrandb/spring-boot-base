package site.code4fun.controller;

import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.Payload;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.simp.SimpMessagingTemplate;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;

import site.code4fun.entity.Message;
import site.code4fun.entity.OutputMessage;
import site.code4fun.entity.User;
import site.code4fun.entity.UserPrincipal;
import site.code4fun.message.Response;
import site.code4fun.service.UserService;
import lombok.val;
import lombok.extern.slf4j.Slf4j;

import org.springframework.messaging.handler.annotation.Header;

@Controller
@Slf4j
public class ChatController {

	@Autowired
	private SimpMessagingTemplate simpMessagingTemplate;

	@Autowired
	private UserService userService;
	private static final String token = "this is a token generated by your code!";

	@MessageMapping("/topic/chat")
//    @SendTo("/topic/message")
	public void sendAll(@Payload Message msg, Authentication auth) throws Exception {
		UserPrincipal principal = (UserPrincipal) auth.getPrincipal();
		User user = userService.getByUserName(principal.getUsername());

		OutputMessage out = OutputMessage.builder().from(user.getId()).avatar(user.getAvatar())
				.fullName(user.getFullName()).text(msg.getText()).time(new Timestamp(System.currentTimeMillis()))
				.build();
		simpMessagingTemplate.convertAndSend("/topic/message", out);
	}

	@MessageMapping("/direct/chat")
	public void sendDirect(@Payload Message msg, Authentication auth) {
		UserPrincipal principal = (UserPrincipal) auth.getPrincipal();

		User user = userService.getByUserName(principal.getUsername());

		OutputMessage out = OutputMessage.builder().from(user.getId()).avatar(user.getAvatar())
				.fullName(user.getFullName()).text(msg.getText()).time(new Timestamp(System.currentTimeMillis()))
				.build();
		simpMessagingTemplate.convertAndSendToUser(msg.getTo(), "/queue/reply", out);
	}

	@MessageMapping("/broadcast")
	@SendTo("/checkAuthorization")
	public Response broadcast(site.code4fun.message.Message message,
			@Header(value = "authorization") String authorizationToken) {
		val response = new Response("Token check failed!");
        if (authorizationToken.equals(token)) {
            log.info("Token check success!!!");
            response.setResponse("Authorization success!");
        } else {
            log.info(response.getResponse());
        }
        return response;
	}
}
